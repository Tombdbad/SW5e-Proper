// shared/schema/character.ts
import { z } from 'zod';

// Base schemas for reusable components
export const AbilityScoresSchema = z.object({
  strength: z.number().min(3).max(20),
  dexterity: z.number().min(3).max(20),
  constitution: z.number().min(3).max(20),
  intelligence: z.number().min(3).max(20),
  wisdom: z.number().min(3).max(20),
  charisma: z.number().min(3).max(20),
});

export const SkillsSchema = z.object({
  acrobatics: z.boolean().default(false),
  animalHandling: z.boolean().default(false),
  athletics: z.boolean().default(false),
  computers: z.boolean().default(false),
  deception: z.boolean().default(false),
  insight: z.boolean().default(false),
  intimidation: z.boolean().default(false),
  investigation: z.boolean().default(false),
  lore: z.boolean().default(false),
  medicine: z.boolean().default(false),
  nature: z.boolean().default(false),
  perception: z.boolean().default(false),
  performance: z.boolean().default(false),
  persuasion: z.boolean().default(false),
  piloting: z.boolean().default(false),
  sleightOfHand: z.boolean().default(false),
  stealth: z.boolean().default(false),
  survival: z.boolean().default(false),
  technology: z.boolean().default(false),
});

// Character schema incorporating all needed fields
export const CharacterSchema = z.object({
  id: z.string().optional(),
  userId: z.string().optional(),
  
  // Basic Info
  name: z.string().min(1, "Character name is required"),
  level: z.number().min(1).max(20).default(1),
  experience: z.number().min(0).default(0),
  
  // Character Choices
  species: z.object({
    id: z.string(),
    name: z.string(),
    traits: z.array(z.string()).default([]),
    abilityScoreIncreases: z.record(z.string(), z.number()).optional(),
  }),
  
  class: z.object({
    id: z.string(),
    name: z.string(),
    hitDie: z.number(),
    primaryAbility: z.string(),
    savingThrows: z.array(z.string()),
    features: z.array(z.string()).default([]),
  }),
  
  background: z.object({
    id: z.string().optional(),
    name: z.string(),
    feature: z.string().optional(),
    suggestedCharacteristics: z.array(z.string()).optional(),
    skillProficiencies: z.array(z.string()).default([]),
    toolProficiencies: z.array(z.string()).default([]),
    languages: z.array(z.string()).default([]),
    equipment: z.array(z.string()).default([]),
  }).optional(),
  
  // Character Stats
  abilityScores: AbilityScoresSchema,
  
  // Proficiencies
  skills: SkillsSchema,
  languages: z.array(z.string()).default([]),
  toolProficiencies: z.array(z.string()).default([]),
  
  // Combat Stats
  hitPoints: z.object({
    maximum: z.number().min(1),
    current: z.number().min(0),
    temporary: z.number().min(0).default(0),
  }),
  armorClass: z.number().min(0).default(10),
  initiative: z.number().default(0),
  speed: z.number().min(0).default(30),
  
  // Force and Tech Powers
  powers: z.object({
    force: z.array(z.object({
      id: z.string(),
      name: z.string(),
      level: z.number(),
      description: z.string(),
      castingTime: z.string(),
      range: z.string(),
      duration: z.string(),
      concentration: z.boolean().default(false),
    })).default([]),
    tech: z.array(z.object({
      id: z.string(),
      name: z.string(),
      level: z.number(),
      description: z.string(),
      castingTime: z.string(),
      range: z.string(),
      duration: z.string(),
      concentration: z.boolean().default(false),
    })).default([]),
  }).default({ force: [], tech: [] }),
  
  // Equipment
  equipment: z.array(z.object({
    id: z.string(),
    name: z.string(),
    quantity: z.number().min(0).default(1),
    weight: z.number().min(0).default(0),
    description: z.string().optional(),
    equipped: z.boolean().default(false),
  })).default([]),
  
  credits: z.number().min(0).default(0),
  
  // Character Details
  alignment: z.string().optional(),
  personality: z.string().optional(),
  ideals: z.string().optional(),
  bonds: z.string().optional(),
  flaws: z.string().optional(),
  appearance: z.string().optional(),
  backstory: z.string().optional(),
  
  // Tracking
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

// Type definition generated from the schema
export type Character = z.infer<typeof CharacterSchema>;

// Empty character template for initialization
export const emptyCharacter: Character = {
  name: '',
  level: 1,
  experience: 0,
  species: {
    id: '',
    name: '',
    traits: [],
  },
  class: {
    id: '',
    name: '',
    hitDie: 8,
    primaryAbility: 'strength',
    savingThrows: [],
    features: [],
  },
  abilityScores: {
    strength: 10,
    dexterity: 10,
    constitution: 10,
    intelligence: 10,
    wisdom: 10,
    charisma: 10,
  },
  skills: {
    acrobatics: false,
    animalHandling: false,
    athletics: false,
    computers: false,
    deception: false,
    insight: false,
    intimidation: false,
    investigation: false,
    lore: false,
    medicine: false,
    nature: false,
    perception: false,
    performance: false,
    persuasion: false,
    piloting: false,
    sleightOfHand: false,
    stealth: false,
    survival: false,
    technology: false,
  },
  languages: [],
  toolProficiencies: [],
  hitPoints: {
    maximum: 8,
    current: 8,
    temporary: 0,
  },
  armorClass: 10,
  initiative: 0,
  speed: 30,
  powers: {
    force: [],
    tech: [],
  },
  equipment: [],
  credits: 0,
};