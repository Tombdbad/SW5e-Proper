// components/CharacterCreator.tsx
import { FC } from 'react';
import { Tab } from '@headlessui/react';
import { FormProvider } from 'react-hook-form';
import { useCharacterForm } from '../hooks/useCharacterForm';
import { useCharacterStore } from '../store/useCharacterStore';

// Step components
import BasicInfoStep from './steps/BasicInfoStep';
import SpeciesSelectionStep from './steps/SpeciesSelectionStep';
import ClassSelectionStep from './steps/ClassSelectionStep';
import AbilityScoresStep from './steps/AbilityScoresStep';
import SkillsSelectionStep from './steps/SkillsSelectionStep';
import BackgroundStep from './steps/BackgroundStep';
import EquipmentStep from './steps/EquipmentStep';
import PowersSelectionStep from './steps/PowersSelectionStep';
import CharacterDetailsStep from './steps/CharacterDetailsStep';
import CharacterSummaryStep from './steps/CharacterSummaryStep';

// UI components
import StepNavigation from './ui/StepNavigation';
import ValidationProgress from './ui/ValidationProgress';
import SaveControls from './ui/SaveControls';

const steps = [
  { id: 0, name: 'Basic Info', component: BasicInfoStep },
  { id: 1, name: 'Species', component: SpeciesSelectionStep },
  { id: 2, name: 'Class', component: ClassSelectionStep },
  { id: 3, name: 'Abilities', component: AbilityScoresStep },
  { id: 4, name: 'Skills', component: SkillsSelectionStep },
  { id: 5, name: 'Background', component: BackgroundStep },
  { id: 6, name: 'Equipment', component: EquipmentStep },
  { id: 7, name: 'Powers', component: PowersSelectionStep },
  { id: 8, name: 'Details', component: CharacterDetailsStep },
  { id: 9, name: 'Summary', component: CharacterSummaryStep },
];

const CharacterCreator: FC = () => {
  const { form, onSubmit, errors, isValid } = useCharacterForm();
  const { currentStep, setCurrentStep, completedSteps, saveCharacter, isDirty } = useCharacterStore();
  
  const handleSave = async () => {
    // Validate form before saving
    await onSubmit();
    if (isValid) {
      await saveCharacter();
    }
  };
  
  const handleStepChange = (index: number) => {
    // Optionally validate current step before allowing navigation
    setCurrentStep(index);
  };
  
  return (
    <div className="character-creator">
      <FormProvider {...form}>
        <form onSubmit={onSubmit}>
          <div className="flex flex-col space-y-4">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">SW5E Character Creator</h1>
              <SaveControls onSave={handleSave} isDirty={isDirty} />
            </div>
            
            <ValidationProgress 
              steps={steps} 
              completedSteps={completedSteps} 
              currentStep={currentStep} 
            />
            
            <div className="flex space-x-4">
              <div className="w-64 shrink-0">
                <StepNavigation 
                  steps={steps} 
                  currentStep={currentStep} 
                  onStepChange={handleStepChange}
                  completedSteps={completedSteps}
                />
              </div>
              
              <div className="flex-grow">
                <Tab.Group selectedIndex={currentStep} onChange={handleStepChange}>
                  <Tab.Panels>
                    {steps.map(({ id, component: StepComponent }) => (
                      <Tab.Panel key={id}>
                        <StepComponent />
                      </Tab.Panel>
                    ))}
                  </Tab.Panels>
                </Tab.Group>
              </div>
            </div>
            
            <div className="flex justify-between mt-4">
              <button
                type="button"
                className="px-4 py-2 bg-gray-200 rounded"
                onClick={() => currentStep > 0 && setCurrentStep(currentStep - 1)}
                disabled={currentStep === 0}
              >
                Previous
              </button>
              
              <button
                type="button"
                className="px-4 py-2 bg-blue-600 text-white rounded"
                onClick={() => {
                  if (currentStep < steps.length - 1) {
                    setCurrentStep(currentStep + 1);
                  } else {
                    onSubmit();
                  }
                }}
                disabled={!completedSteps[currentStep]}
              >
                {currentStep < steps.length - 1 ? 'Next' : 'Finish'}
              </button>
            </div>
          </div>
        </form>
      </FormProvider>
    </div>
  );
};

export default CharacterCreator;