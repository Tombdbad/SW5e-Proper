# Prompt for SW5E Character Creator: UI Components for Loading States

## Project Context
I'm developing a Star Wars 5th Edition (SW5E) character creator application built with:
- React + TypeScript + Vite frontend
- Tailwind CSS for styling
- Radix UI primitives for accessible components
- React Query for data fetching with loading states
- Custom UI components in `client/src/components/ui/`
- Star Wars themed design with translucent components

## Current Implementation
Our UI currently:
- Uses Tailwind for styling with custom Star Wars theme
- Has basic components built on Radix UI primitives
- Lacks consistent loading state handling
- Doesn't provide sufficient feedback during API calls
- Has some components in `client/src/components/ui/` folder

## Request
Please enhance our UI with a comprehensive set of loading state components:

1. **Core Loading Components**:
   - Create reusable loading indicators:
     - Spinner component with size variants
     - Progress bar for longer operations
     - Skeleton loaders for content placeholders
     - Loading overlays for sections/panels
   - Star Wars themed loading animations (lightsaber loader, hologram effect)

2. **Loading State Integration**:
   - Create higher-order components or hooks for:
     - Wrapping components with loading states
     - Handling different loading scenarios (initial load, refresh, pagination)
     - Managing loading state transitions with animations
   - Implement error state UI alternatives

3. **Async Button Components**:
   - Create enhanced button components that:
     - Show loading state while action is pending
     - Prevent multiple clicks during processing
     - Handle success/error states visually
     - Support different loading indicator variants

4. **Page and Section Loaders**:
   - Implement:
     - Full-page loading overlays for initial data fetch
     - Section-specific loaders for partial content updates
     - Character sheet section loaders
     - List skeleton loaders for equipment, powers, etc.

## Technical Requirements

### Component Structure
Follow our existing component pattern:
```typescript
import React from 'react';
import { cn } from '../../lib/utils';

interface SpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
  variant?: 'primary' | 'secondary';
}

export const Spinner: React.FC<SpinnerProps> = ({
  size = 'md',
  className,
  variant = 'primary',
}) => {
  return (
    <div
      className={cn(
        'animate-spin rounded-full border-t-2',
        {
          'w-4 h-4 border-t-1': size === 'sm',
          'w-8 h-8 border-t-2': size === 'md',
          'w-12 h-12 border-t-3': size === 'lg',
        },
        {
          'border-blue-500': variant === 'primary',
          'border-amber-500': variant === 'secondary',
        },
        className
      )}
      aria-label="Loading"
    />
  );
};
```

### Tailwind Configuration
Use our existing Tailwind theme:
```typescript
// Excerpt from tailwind.config.ts
const config = {
  theme: {
    extend: {
      colors: {
        'sw-blue': '#2596be',
        'sw-amber': '#ffc107',
        'sw-red': '#d13b40',
        'sw-bg-dark': '#121212',
        'sw-bg-light': '#f0f0f0',
      },
      animation: {
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
        'lightsaber': 'lightsaber 2s ease-in-out infinite',
      },
      // Additional theme extensions...
    },
  },
};
```

### React Query Integration
Work with our React Query implementation:
```typescript
// Example of how to use loading state from React Query
export const SpeciesList: React.FC = () => {
  const { data, isLoading, error } = useSpecies();
  
  if (isLoading) {
    return <LoadingPanel height="300px" />;
  }
  
  if (error) {
    return <ErrorMessage error={error} />;
  }
  
  return (
    <div className="grid grid-cols-2 gap-4">
      {data?.map(species => (
        <SpeciesCard key={species.id} species={species} />
      ))}
    </div>
  );
};
```

### Accessibility Requirements
- All loading indicators must have proper ARIA attributes
- Animations must respect reduced motion preferences
- Loading states should announce to screen readers
- Focus management during loading state changes

### Integration with Custom Components
Work with our existing Radix-based components:
```typescript
import * as Dialog from '@radix-ui/react-dialog';

export const LoadingDialog: React.FC<{
  open: boolean;
  title: string;
}> = ({ open, title }) => {
  return (
    <Dialog.Root open={open}>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black/50 backdrop-blur-sm" />
        <Dialog.Content className="fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 bg-sw-bg-dark/80 p-6 rounded-lg border border-sw-blue/30 shadow-lg">
          <Dialog.Title className="text-sw-blue text-lg">{title}</Dialog.Title>
          <div className="flex justify-center items-center h-40">
            <Spinner size="lg" />
          </div>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  );
};
```

## Deliverables
1. Core loading components in `client/src/components/ui/loading/`:
   - Spinner.tsx
   - ProgressBar.tsx
   - Skeleton.tsx
   - LoadingOverlay.tsx
   - LightsaberLoader.tsx (themed loader)

2. Higher-order components and hooks in `client/src/hooks/`:
   - useLoadingState.ts
   - withLoading.tsx

3. Enhanced button components in `client/src/components/ui/`:
   - AsyncButton.tsx
   - LoadingButton.tsx

4. Page and section loaders:
   - FullPageLoader.tsx
   - SectionLoader.tsx
   - ListSkeleton.tsx
   - CharacterSheetSkeleton.tsx

All components should match our existing Star Wars visual theme, use Tailwind for styling, and integrate smoothly with React Query's loading states.