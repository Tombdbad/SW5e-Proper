// hooks/useCharacterForm.ts
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useEffect } from 'react';
import { CharacterSchema, Character } from '../shared/schema/character';
import { useCharacterStore } from '../store/useCharacterStore';

export function useCharacterForm() {
  // Connect to the Zustand store
  const { 
    character, 
    updateCharacter, 
    updateNestedCharacter,
    markStepComplete,
    currentStep 
  } = useCharacterStore();
  
  // Initialize React Hook Form with schema validation
  const form = useForm<Character>({
    resolver: zodResolver(CharacterSchema),
    defaultValues: character,
    mode: 'onChange',
  });
  
  const { formState, watch, handleSubmit } = form;
  const { errors, isValid, isDirty } = formState;
  
  // Keep form synchronized with store
  useEffect(() => {
    form.reset(character);
  }, [character, form]);
  
  // Watch form changes and update store
  useEffect(() => {
    const subscription = watch((value, { name, type }) => {
      // Only update on blur or explicit submit to reduce store updates
      if (type === 'blur' || type === 'change') {
        if (name) {
          const path = name.split('.');
          if (path.length > 1) {
            updateNestedCharacter(path, value[path[0]][path[1]]);
          } else {
            updateCharacter(name as keyof Character, value[name]);
          }
        }
      }
    });
    
    return () => subscription.unsubscribe();
  }, [watch, updateCharacter, updateNestedCharacter]);
  
  // Mark step as complete when valid
  useEffect(() => {
    markStepComplete(currentStep, isValid);
  }, [isValid, currentStep, markStepComplete]);
  
  // Submit handler that updates the store
  const onSubmit = handleSubmit((data) => {
    Object.entries(data).forEach(([key, value]) => {
      updateCharacter(key as keyof Character, value);
    });
  });
  
  return {
    form,
    errors,
    isValid,
    isDirty,
    onSubmit
  };
}