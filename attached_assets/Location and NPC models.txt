// models/Location.js
const mongoose = require('mongoose');

const LocationSchema = new mongoose.Schema({
  name: { type: String, required: true },
  type: { type: String, required: true }, // Planet, Space Station, City, Building, etc.
  description: { type: String },
  coordinates: {
    sector: String,
    system: String,
    x: Number,
    y: Number
  },
  parentLocation: { type: mongoose.Schema.Types.ObjectId, ref: 'Location' }, // For hierarchical locations
  childLocations: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Location' }],
  mapData: {
    image: String, // URL or path to map image
    mapType: { type: String, enum: ['galaxy', 'system', 'planet', 'city', 'building', 'room'] },
    width: Number,
    height: Number,
    features: [{
      type: { type: String }, // door, wall, furniture, etc.
      x: Number,
      y: Number,
      width: Number,
      height: Number,
      properties: {} // Additional properties specific to this feature
    }]
  },
  npcs: [{ type: mongoose.Schema.Types.ObjectId, ref: 'NPC' }],
  importantItems: [{ 
    name: String,
    description: String,
    location: String // More specific location within this area
  }],
  factionControl: {
    faction: String,
    strength: { type: Number, default: 0 } // 0-10 scale of control
  },
  encounterTable: [{
    probability: Number, // 0-100
    encounter: String
  }],
  created: { type: Date, default: Date.now },
  lastUpdated: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Location', LocationSchema);

// models/NPC.js
const mongoose = require('mongoose');

const NPCSchema = new mongoose.Schema({
  name: { type: String, required: true },
  species: String,
  description: String,
  role: String, // Merchant, Quest Giver, Enemy, Ally, etc.
  faction: String,
  stats: {
    level: { type: Number, default: 1 },
    health: { type: Number },
    maxHealth: { type: Number },
    forceUser: { type: Boolean, default: false },
    forceSide: { type: String, enum: ['light', 'dark', 'neutral', 'none'], default: 'none' }
  },
  personality: {
    traits: [String],
    motivation: String,
    attitude: { type: String }, // Friendly, Hostile, Neutral, etc.
  },
  inventory: [{
    item: String,
    forSale: Boolean,
    price: Number
  }],
  dialogueSnippets: [{
    context: String,
    line: String
  }],
  relationships: [{
    npcId: { type: mongoose.Schema.Types.ObjectId, ref: 'NPC' },
    relationship: String // Friend, Enemy, Family, etc.
  }],
  questsOffered: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Quest' }],
  currentLocation: { type: mongoose.Schema.Types.ObjectId, ref: 'Location' },
  isAlive: { type: Boolean, default: true },
  created: { type: Date, default: Date.now },
  lastUpdated: { type: Date, default: Date.now }
});

module.exports = mongoose.model('NPC', NPCSchema);