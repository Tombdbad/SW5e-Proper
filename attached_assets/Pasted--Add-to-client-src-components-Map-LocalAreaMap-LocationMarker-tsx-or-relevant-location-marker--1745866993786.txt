// Add to client/src/components/Map/LocalAreaMap/LocationMarker.tsx
// or relevant location marker component

import React, { useState, useRef, useEffect } from 'react';
import { useFrame } from '@react-three/fiber';
import * as THREE from 'three';
import { Text } from '@react-three/drei';

interface LocationMarkerProps {
  id: string;
  name: string;
  type: 'city' | 'settlement' | 'outpost' | 'landmark' | 'wilderness';
  position: [number, number, number];
  selected?: boolean;
  onSelect?: (id: string) => void;
}

// Color map for different location types
const typeColors = {
  city: '#ffcc00',
  settlement: '#4488ff',
  outpost: '#ff4444',
  landmark: '#44cc44',
  wilderness: '#88aa66'
};

export const InteractiveLocationMarker: React.FC<LocationMarkerProps> = ({
  id,
  name,
  type,
  position,
  selected = false,
  onSelect = () => {}
}) => {
  const [hovered, setHovered] = useState(false);
  const markerRef = useRef<THREE.Group>(null);
  const pulseRef = useRef<THREE.Mesh>(null);
  const ringRef = useRef<THREE.Mesh>(null);
  
  // Get color based on location type
  const color = typeColors[type] || '#ffffff';
  
  // Animation for hovering and selection
  useFrame(({ clock }) => {
    if (markerRef.current) {
      // Subtle floating animation
      markerRef.current.position.y = position[1] + Math.sin(clock.getElapsedTime() * 2) * 0.05;
      
      // Grow when hovered
      const scale = hovered ? 1.2 : 1;
      markerRef.current.scale.lerp(new THREE.Vector3(scale, scale, scale), 0.1);
    }
    
    if (pulseRef.current) {
      // Pulse animation for selected markers
      if (selected) {
        const pulse = Math.sin(clock.getElapsedTime() * 3) * 0.5 + 1;
        pulseRef.current.scale.set(pulse, pulse, pulse);
        
        const material = pulseRef.current.material as THREE.MeshBasicMaterial;
        material.opacity = 0.6 - Math.sin(clock.getElapsedTime() * 3) * 0.3;
      }
    }
    
    if (ringRef.current) {
      // Rotating ring for selected markers
      ringRef.current.rotation.z = clock.getElapsedTime() * 0.5;
    }
  });
  
  // Type-specific marker geometries
  const getMarkerGeometry = () => {
    switch (type) {
      case 'city':
        // Diamond shape for cities
        return <octahedronGeometry args={[0.3, 0]} />;
      case 'settlement':
        // Cube for settlements
        return <boxGeometry args={[0.3, 0.3, 0.3]} />;
      case 'outpost':
        // Tetrahedron for outposts
        return <tetrahedronGeometry args={[0.3, 0]} />;
      case 'landmark':
        // Sphere for landmarks
        return <sphereGeometry args={[0.2, 16, 16]} />;
      case 'wilderness':
        // Torus for wilderness areas
        return <torusGeometry args={[0.15, 0.05, 8, 16]} />;
      default:
        return <sphereGeometry args={[0.2, 16, 16]} />;
    }
  };
  
  // Generate marker icon (SVG-like shape using three.js)
  const MarkerIcon = () => {
    return (
      <mesh castShadow>
        {getMarkerGeometry()}
        <meshStandardMaterial 
          color={color} 
          roughness={0.3} 
          metalness={0.8} 
          emissive={color}
          emissiveIntensity={hovered ? 0.5 : 0.2}
        />
      </mesh>
    );
  };
  
  // Handle pointer events
  const handlePointerOver = (e: THREE.Event) => {
    e.stopPropagation();
    setHovered(true);
    document.body.style.cursor = 'pointer';
  };
  
  const handlePointerOut = () => {
    setHovered(false);
    document.body.style.cursor = 'auto';
  };
  
  const handleClick = (e: THREE.Event) => {
    e.stopPropagation();
    onSelect(id);
  };
  
  // Reset cursor on unmount
  useEffect(() => {
    return () => {
      document.body.style.cursor = 'auto';
    };
  }, []);

  return (
    <group 
      position={[position[0], position[1], position[2]]}
      onPointerOver={handlePointerOver}
      onPointerOut={handlePointerOut}
      onClick={handleClick}
    >
      {/* Marker with icon */}
      <group ref={markerRef}>
        <MarkerIcon />
        
        {/* Location name label */}
        <Text
          position={[0, 0.5, 0]}
          fontSize={0.2}
          color={color}
          anchorX="center"
          anchorY="bottom"
          outlineWidth={0.01}
          outlineColor="#000000"
          outlineOpacity={0.8}
          visible={hovered || selected}
        >
          {name}
        </Text>
        
        {/* Beam connecting marker to ground */}
        <mesh position={[0, -0.25, 0]} rotation={[Math.PI / 2, 0, 0]}>
          <cylinderGeometry args={[0.01, 0.01, 0.5, 8]} />
          <meshBasicMaterial color={color} transparent opacity={0.5} />
        </mesh>
      </group>
      
      {/* Selection indicators */}
      {selected && (
        <>
          {/* Pulsing circle */}
          <mesh ref={pulseRef} position={[0, 0.05, 0]} rotation={[Math.PI / 2, 0, 0]}>
            <circleGeometry args={[0.4, 32]} />
            <meshBasicMaterial color={color} transparent opacity={0.5} />
          </mesh>
          
          {/* Rotating ring */}
          <mesh ref={ringRef} position={[0, 0.1, 0]} rotation={[Math.PI / 2, 0, 0]}>
            <ringGeometry args={[0.3, 0.32, 32]} />
            <meshBasicMaterial color={color} side={THREE.DoubleSide} transparent opacity={0.7} />
          </mesh>
        </>
      )}
      
      {/* Ground marker */}
      <mesh position={[0, -0.495, 0]} rotation={[Math.PI / 2, 0, 0]}>
        <circleGeometry args={[0.08, 16]} />
        <meshBasicMaterial color={color} />
      </mesh>
    </group>
  );
};