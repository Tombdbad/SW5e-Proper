// server/routes.ts
import express from "express";
import { db } from "./db";
import { campaigns, characters, locations, npcs, items, characterStarWarsData } from "../shared/schema";
import { eq } from "drizzle-orm";
import { parseCoordinateString, formatCoordinateString } from "../shared/coordinates";

const router = express.Router();

// Existing routes...

// Location routes
router.get("/api/campaigns/:campaignId/locations", async (req, res) => {
  const campaignId = parseInt(req.params.campaignId);
  try {
    const campaignLocations = await db.query.locations.findMany({
      where: eq(locations.campaignId, campaignId),
      with: {
        npcs: true,
        items: true,
      },
    });
    res.json(campaignLocations);
  } catch (error) {
    console.error("Error fetching locations:", error);
    res.status(500).json({ error: "Failed to fetch locations" });
  }
});

router.post("/api/campaigns/:campaignId/locations", async (req, res) => {
  const campaignId = parseInt(req.params.campaignId);
  const { name, description, coordinateString } = req.body;
  
  try {
    const coordData = parseCoordinateString(coordinateString);
    
    const newLocation = await db.insert(locations).values({
      name,
      description,
      coordinateString,
      coordinateData: coordData,
      campaignId,
    }).returning();
    
    res.status(201).json(newLocation[0]);
  } catch (error) {
    console.error("Error creating location:", error);
    res.status(500).json({ error: "Failed to create location" });
  }
});

// NPC routes
router.get("/api/campaigns/:campaignId/npcs", async (req, res) => {
  const campaignId = parseInt(req.params.campaignId);
  try {
    const campaignNpcs = await db.query.npcs.findMany({
      where: eq(npcs.campaignId, campaignId),
    });
    res.json(campaignNpcs);
  } catch (error) {
    console.error("Error fetching NPCs:", error);
    res.status(500).json({ error: "Failed to fetch NPCs" });
  }
});

router.post("/api/campaigns/:campaignId/npcs", async (req, res) => {
  const campaignId = parseInt(req.params.campaignId);
  const { name, species, description, locationId, metadata } = req.body;
  
  try {
    const newNpc = await db.insert(npcs).values({
      name,
      species,
      description,
      locationId,
      campaignId,
      metadata,
    }).returning();
    
    res.status(201).json(newNpc[0]);
  } catch (error) {
    console.error("Error creating NPC:", error);
    res.status(500).json({ error: "Failed to create NPC" });
  }
});

// Star Wars character data routes
router.get("/api/characters/:characterId/starwars", async (req, res) => {
  const characterId = parseInt(req.params.characterId);
  try {
    const data = await db.query.characterStarWarsData.findFirst({
      where: eq(characterStarWarsData.characterId, characterId),
    });
    res.json(data || {});
  } catch (error) {
    console.error("Error fetching Star Wars character data:", error);
    res.status(500).json({ error: "Failed to fetch Star Wars character data" });
  }
});

router.post("/api/characters/:characterId/starwars", async (req, res) => {
  const characterId = parseInt(req.params.characterId);
  const { species, homeworld, affiliation, forceUser, forcePowers, customData } = req.body;
  
  try {
    // Check if data already exists
    const existing = await db.query.characterStarWarsData.findFirst({
      where: eq(characterStarWarsData.characterId, characterId),
    });
    
    if (existing) {
      // Update existing record
      const updated = await db.update(characterStarWarsData)
        .set({ species, homeworld, affiliation, forceUser, forcePowers, customData })
        .where(eq(characterStarWarsData.characterId, characterId))
        .returning();
      res.json(updated[0]);
    } else {
      // Create new record
      const created = await db.insert(characterStarWarsData).values({
        characterId,
        species,
        homeworld,
        affiliation,
        forceUser,
        forcePowers,
        customData,
      }).returning();
      res.status(201).json(created[0]);
    }
  } catch (error) {
    console.error("Error saving Star Wars character data:", error);
    res.status(500).json({ error: "Failed to save Star Wars character data" });
  }
});

export default router;