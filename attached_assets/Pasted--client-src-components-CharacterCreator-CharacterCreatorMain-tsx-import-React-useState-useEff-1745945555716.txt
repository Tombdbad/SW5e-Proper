// client/src/components/CharacterCreator/CharacterCreatorMain.tsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCharacter } from '../../lib/stores/useCharacter';
import { CharacterCreationSteps } from './CharacterCreationSteps';
import { CharacterPreview } from './CharacterPreview';
import { CharacterSheet } from './CharacterSheet';
import { StepNavigation } from './StepNavigation';
import { useToast } from '../../lib/hooks/useToast';
import { useQueryClient } from '@tanstack/react-query';
import { Character } from '../../../shared/types';

export const CharacterCreatorMain: React.FC = () => {
  const navigate = useNavigate();
  const { showToast } = useToast();
  const queryClient = useQueryClient();
  const {
    character,
    resetCharacter,
    updateCharacter,
    calculateDerivedStats,
    validateCharacter,
  } = useCharacter();
  
  const [currentStep, setCurrentStep] = useState(0);
  const [showPreview, setShowPreview] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  // Reset character on component mount
  useEffect(() => {
    resetCharacter();
  }, [resetCharacter]);

  // Recalculate derived stats when character changes
  useEffect(() => {
    calculateDerivedStats();
  }, [character, calculateDerivedStats]);

  const handleStepChange = (step: number) => {
    const validationErrors = validateCharacter(currentStep);
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }
    
    setErrors({});
    setCurrentStep(step);
  };

  const handleNextStep = () => {
    handleStepChange(currentStep + 1);
  };

  const handlePrevStep = () => {
    handleStepChange(currentStep - 1);
  };

  const togglePreview = () => {
    setShowPreview(!showPreview);
  };

  const handleSubmit = async () => {
    // Validate all steps
    let allErrors = {};
    for (let i = 0; i < 8; i++) {
      const stepErrors = validateCharacter(i);
      allErrors = { ...allErrors, ...stepErrors };
    }

    if (Object.keys(allErrors).length > 0) {
      setErrors(allErrors);
      showToast('Please fix all errors before submitting', 'error');
      return;
    }

    setIsSubmitting(true);
    try {
      const response = await fetch('/api/characters', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(character),
      });

      if (!response.ok) {
        throw new Error('Failed to save character');
      }

      const savedCharacter = await response.json();
      
      // Invalidate and refetch characters query
      queryClient.invalidateQueries(['characters']);
      
      showToast('Character created successfully!', 'success');
      navigate(`/characters/${savedCharacter.id}`);
    } catch (error) {
      console.error('Error creating character:', error);
      showToast('Failed to create character', 'error');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="flex flex-col h-full bg-gray-900 text-gray-100">
      <div className="container mx-auto px-4 py-6">
        <h1 className="text-3xl font-bold text-yellow-400 mb-6">Star Wars Character Creator</h1>
        
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Main creation area */}
          <div className="flex-1">
            <CharacterCreationSteps 
              currentStep={currentStep} 
              errors={errors}
            />
            
            <StepNavigation
              currentStep={currentStep}
              onPrev={handlePrevStep}
              onNext={handleNextStep}
              onSubmit={handleSubmit}
              isSubmitting={isSubmitting}
              isFirstStep={currentStep === 0}
              isLastStep={currentStep === 7}
              togglePreview={togglePreview}
            />
          </div>
          
          {/* Preview panel */}
          <div className="w-full lg:w-1/3 sticky top-0">
            {showPreview ? (
              <CharacterSheet character={character} />
            ) : (
              <CharacterPreview character={character} />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// client/src/components/CharacterCreator/CharacterCreationSteps.tsx
import React from 'react';
import { BasicInfo } from './steps/BasicInfo';
import { SpeciesSelection } from './steps/SpeciesSelection';
import { ClassSelection } from './steps/ClassSelection';
import { AbilityScores } from './steps/AbilityScores';
import { BackgroundSelection } from './steps/BackgroundSelection';
import { ForcePowersSelection } from './steps/ForcePowersSelection';
import { TechPowersSelection } from './steps/TechPowersSelection';
import { EquipmentSelection } from './steps/EquipmentSelection';

type CharacterCreationStepsProps = {
  currentStep: number;
  errors: Record<string, string>;
};

export const CharacterCreationSteps: React.FC<CharacterCreationStepsProps> = ({
  currentStep,
  errors,
}) => {
  // Render the current step
  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return <BasicInfo errors={errors} />;
      case 1:
        return <SpeciesSelection errors={errors} />;
      case 2:
        return <ClassSelection errors={errors} />;
      case 3:
        return <AbilityScores errors={errors} />;
      case 4:
        return <BackgroundSelection errors={errors} />;
      case 5:
        return <ForcePowersSelection errors={errors} />;
      case 6:
        return <TechPowersSelection errors={errors} />;
      case 7:
        return <EquipmentSelection errors={errors} />;
      default:
        return <BasicInfo errors={errors} />;
    }
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6 mb-6 border border-gray-700">
      {renderStep()}
    </div>
  );
};

// client/src/components/CharacterCreator/steps/BasicInfo.tsx
import React from 'react';
import { useCharacter } from '../../../lib/stores/useCharacter';
import { ALIGNMENTS } from '../../../lib/sw5e/constants';
import { FormField } from '../../ui/FormField';
import { AvatarUploader } from '../../ui/AvatarUploader';

type BasicInfoProps = {
  errors: Record<string, string>;
};

export const BasicInfo: React.FC<BasicInfoProps> = ({ errors }) => {
  const { character, updateCharacter } = useCharacter();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    updateCharacter({ [name]: value });
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-yellow-400">Basic Information</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <FormField
            label="Character Name"
            name="name"
            value={character.name || ''}
            onChange={handleChange}
            error={errors.name}
            required
          />
          
          <FormField
            label="Level"
            name="level"
            type="number"
            min={1}
            max={20}
            value={character.level || 1}
            onChange={handleChange}
            error={errors.level}
            required
          />
          
          <FormField
            label="Alignment"
            name="alignment"
            type="select"
            value={character.alignment || ''}
            options={ALIGNMENTS.map(alignment => ({
              value: alignment,
              label: alignment
            }))}
            onChange={handleChange}
            error={errors.alignment}
            required
          />
        </div>
        
        <div>
          <label className="block text-gray-300 mb-2">Character Portrait</label>
          <AvatarUploader
            currentAvatar={character.avatarUrl}
            onUpload={(url) => updateCharacter({ avatarUrl: url })}
            error={errors.avatarUrl}
          />
          <p className="text-sm text-gray-400 mt-2">
            Choose an avatar that represents your character in the Star Wars universe
          </p>
        </div>
      </div>
      
      <div>
        <FormField
          label="Character Concept"
          name="concept"
          type="textarea"
          value={character.concept || ''}
          onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => 
            updateCharacter({ concept: e.target.value })}
          placeholder="Describe your character's personality, goals, and background..."
          error={errors.concept}
        />
      </div>
    </div>
  );
};

// client/src/components/CharacterCreator/steps/SpeciesSelection.tsx
import React, { useState } from 'react';
import { useCharacter } from '../../../lib/stores/useCharacter';
import { SPECIES } from '../../../lib/sw5e/species';
import { FormField } from '../../ui/FormField';
import { SpeciesCard } from '../ui/SpeciesCard';
import { SearchBar } from '../../ui/SearchBar';

type SpeciesSelectionProps = {
  errors: Record<string, string>;
};

export const SpeciesSelection: React.FC<SpeciesSelectionProps> = ({ errors }) => {
  const { character, updateCharacter } = useCharacter();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterCategory, setFilterCategory] = useState('all');

  // Filter species based on search and category
  const filteredSpecies = SPECIES.filter(species => {
    const matchesSearch = species.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = filterCategory === 'all' || species.category === filterCategory;
    return matchesSearch && matchesCategory;
  });

  const handleSelectSpecies = (speciesId: string) => {
    const selectedSpecies = SPECIES.find(s => s.id === speciesId);
    if (selectedSpecies) {
      updateCharacter({ 
        speciesId, 
        speciesName: selectedSpecies.name,
        // Apply species traits to character
        abilityScoreAdjustments: selectedSpecies.abilityScoreAdjustments,
        size: selectedSpecies.size,
        speed: selectedSpecies.speed,
        vision: selectedSpecies.vision,
        languages: selectedSpecies.languages,
        traits: selectedSpecies.traits
      });
    }
  };

  const speciesCategories = [
    { value: 'all', label: 'All Species' },
    { value: 'core', label: 'Core Species' },
    { value: 'expanded', label: 'Expanded Universe' },
    { value: 'legends', label: 'Legends' }
  ];

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold text-yellow-400">Choose Your Species</h2>
      
      <div className="flex flex-col md:flex-row gap-4 mb-6">
        <SearchBar 
          placeholder="Search species..." 
          value={searchTerm} 
          onChange={setSearchTerm}
          className="flex-1"
        />
        
        <FormField
          name="speciesCategory"
          type="select"
          value={filterCategory}
          options={speciesCategories}
          onChange={(e) => setFilterCategory(e.target.value)}
          className="md:w-1/3"
        />
      </div>
      
      {errors.speciesId && (
        <div className="text-red-500 mb-4">{errors.speciesId}</div>
      )}
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredSpecies.map(species => (
          <SpeciesCard
            key={species.id}
            species={species}
            isSelected={character.speciesId === species.id}
            onSelect={handleSelectSpecies}
          />
        ))}
      </div>
      
      {filteredSpecies.length === 0 && (
        <div className="text-center py-8 text-gray-400">
          No species found matching your search criteria
        </div>
      )}
      
      {character.speciesId && (
        <div className="mt-6 p-4 bg-gray-700 rounded-lg">
          <h3 className="text-lg font-bold text-yellow-300 mb-2">
            Selected: {character.speciesName}
          </h3>
          <div className="text-sm text-gray-300">
            <p><span className="font-bold">Ability Adjustments:</span> {
              Object.entries(character.abilityScoreAdjustments || {})
                .filter(([_, value]) => value !== 0)
                .map(([ability, value]) => `${ability} ${value > 0 ? '+' : ''}${value}`)
                .join(', ')
            }</p>
            <p><span className="font-bold">Size:</span> {character.size}</p>
            <p><span className="font-bold">Speed:</span> {character.speed} ft.</p>
            <p><span className="font-bold">Vision:</span> {character.vision}</p>
            <p><span className="font-bold">Languages:</span> {(character.languages || []).join(', ')}</p>
          </div>
        </div>
      )}
    </div>
  );
};

// client/src/components/CharacterCreator/ui/SpeciesCard.tsx
import React from 'react';
import { Species } from '../../../../shared/types';

type SpeciesCardProps = {
  species: Species;
  isSelected: boolean;
  onSelect: (speciesId: string) => void;
};

export const SpeciesCard: React.FC<SpeciesCardProps> = ({
  species,
  isSelected,
  onSelect,
}) => {
  return (
    <div 
      className={`
        relative rounded-lg overflow-hidden cursor-pointer
        transition-all duration-200 border-2
        ${isSelected ? 'border-yellow-400 shadow-lg shadow-yellow-400/30' : 'border-gray-700 hover:border-gray-500'}
      `}
      onClick={() => onSelect(species.id)}
    >
      <div className="aspect-w-16 aspect-h-9">
        <img 
          src={species.imageUrl || '/images/species/default.jpg'} 
          alt={species.name}
          className="object-cover w-full h-full"
        />
      </div>
      
      <div className="p-3 bg-gray-800 bg-opacity-90">
        <h3 className="font-bold text-lg text-yellow-400">{species.name}</h3>
        <p className="text-sm text-gray-300 line-clamp-2">{species.description}</p>
      </div>
      
      {isSelected && (
        <div className="absolute top-2 right-2 bg-yellow-400 text-black p-1 rounded-full">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
          </svg>
        </div>
      )}
    </div>
  );
};

// client/src/components/CharacterCreator/StepNavigation.tsx
import React from 'react';

type StepNavigationProps = {
  currentStep: number;
  onPrev: () => void;
  onNext: () => void;
  onSubmit: () => void;
  isSubmitting: boolean;
  isFirstStep: boolean;
  isLastStep: boolean;
  togglePreview: () => void;
};

export const StepNavigation: React.FC<StepNavigationProps> = ({
  currentStep,
  onPrev,
  onNext,
  onSubmit,
  isSubmitting,
  isFirstStep,
  isLastStep,
  togglePreview,
}) => {
  const steps = [
    "Basic Info",
    "Species",
    "Class",
    "Abilities",
    "Background",
    "Force Powers",
    "Tech Powers",
    "Equipment"
  ];

  return (
    <div className="flex flex-col space-y-4">
      {/* Step indicators */}
      <div className="hidden md:flex justify-between mb-4">
        {steps.map((step, index) => (
          <div 
            key={index}
            className={`
              relative flex-1 text-center
              ${index === currentStep ? 'text-yellow-400 font-bold' : 'text-gray-400'}
              ${index < currentStep ? 'text-green-400' : ''}
            `}
          >
            <div className="relative z-10">
              <div className={`
                w-6 h-6 mx-auto rounded-full flex items-center justify-center
                ${index === currentStep ? 'bg-yellow-400 text-black' : 'bg-gray-700'}
                ${index < currentStep ? 'bg-green-500' : ''}
              `}>
                {index < currentStep ? (
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                ) : (
                  index + 1
                )}
              </div>
              <div className="mt-1 text-xs">{step}</div>
            </div>
            
            {/* Connector line */}
            {index < steps.length - 1 && (
              <div className={`
                absolute top-3 left-1/2 w-full h-0.5
                ${index < currentStep ? 'bg-green-500' : 'bg-gray-700'}
              `}></div>
            )}
          </div>
        ))}
      </div>
      
      {/* Mobile step indicator */}
      <div className="md:hidden text-center mb-4">
        <div className="font-bold text-yellow-400">
          Step {currentStep + 1} of {steps.length}: {steps[currentStep]}
        </div>
      </div>
      
      {/* Navigation buttons */}
      <div className="flex justify-between items-center">
        <button
          type="button"
          onClick={onPrev}
          disabled={isFirstStep}
          className={`
            px-4 py-2 rounded-lg flex items-center
            ${isFirstStep 
              ? 'bg-gray-700 text-gray-500 cursor-not-allowed' 
              : 'bg-gray-700 hover:bg-gray-600 text-white'}
          `}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
          </svg>
          Previous
        </button>
        
        <button
          type="button"
          onClick={togglePreview}
          className="px-4 py-2 rounded-lg bg-blue-700 hover:bg-blue-600 text-white"
        >
          Toggle Preview
        </button>
        
        {isLastStep ? (
          <button
            type="button"
            onClick={onSubmit}
            disabled={isSubmitting}
            className={`
              px-4 py-2 rounded-lg bg-green-600 hover:bg-green-500 text-white flex items-center
              ${isSubmitting ? 'opacity-70 cursor-not-allowed' : ''}
            `}
          >
            {isSubmitting ? 'Creating...' : 'Create Character'}
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        ) : (
          <button
            type="button"
            onClick={onNext}
            className="px-4 py-2 rounded-lg bg-yellow-600 hover:bg-yellow-500 text-white flex items-center"
          >
            Next
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
            </svg>
          </button>
        )}
      </div>
    </div>
  );
};

// client/src/components/CharacterCreator/CharacterPreview.tsx
import React from 'react';
import { Character } from '../../../shared/types';

type CharacterPreviewProps = {
  character: Character;
};

export const CharacterPreview: React.FC<CharacterPreviewProps> = ({ character }) => {
  // Default avatar if none provided
  const avatarUrl = character.avatarUrl || '/images/default-avatar.png';
  
  // Calculate completion percentage
  const calculateCompletion = () => {
    let steps = 0;
    let completed = 0;
    
    // Basic info
    steps += 3;
    if (character.name) completed++;
    if (character.level) completed++;
    if (character.alignment) completed++;
    
    // Species
    steps++;
    if (character.speciesId) completed++;
    
    // Class
    steps++;
    if (character.classId) completed++;
    
    // Ability scores
    steps++;
    if (character.abilityScores?.strength) completed++;
    
    // Background
    steps++;
    if (character.backgroundId) completed++;
    
    // Powers depend on class
    if (character.classId) {
      const forcePowerClasses = ['consular', 'guardian', 'sentinel'];
      const techPowerClasses = ['engineer', 'scout', 'scholar'];
      
      if (forcePowerClasses.includes(character.classId)) {
        steps++;
        if (character.forcePowers?.length) completed++;
      }
      
      if (techPowerClasses.includes(character.classId)) {
        steps++;
        if (character.techPowers?.length) completed++;
      }
    }
    
    // Equipment
    steps++;
    if (character.equipment?.length) completed++;
    
    return Math.round((completed / steps) * 100);
  };
  
  const completionPercentage = calculateCompletion();
  
  return (
    <div className="bg-gray-800 rounded-lg p-4 border border-gray-700 sticky top-4">
      <h3 className="text-xl font-bold text-yellow-400 mb-4">Character Preview</h3>
      
      <div className="flex items-center space-x-4 mb-4">
        <div className="w-16 h-16 rounded-full overflow-hidden bg-gray-700">
          {character.avatarUrl && (
            <img 
              src={avatarUrl} 
              alt={character.name || 'Character'} 
              className="w-full h-full object-cover"
            />
          )}
        </div>
        
        <div>
          <h4 className="text-lg font-bold">
            {character.name || 'Unnamed Character'}
          </h4>
          <div className="text-sm text-gray-300">
            {character.speciesName ? `${character.speciesName} ` : ''}
            {character.className ? character.className : ''}
            {character.level ? ` (Level ${character.level})` : ''}
          </div>
        </div>
      </div>
      
      {/* Completion meter */}
      <div className="mb-4">
        <div className="flex justify-between text-xs text-gray-400 mb-1">
          <span>Completion</span>
          <span>{completionPercentage}%</span>
        </div>
        <div className="w-full bg-gray-700 rounded-full h-2">
          <div 
            className="bg-yellow-400 h-2 rounded-full" 
            style={{ width: `${completionPercentage}%` }}
          ></div>
        </div>
      </div>
      
      {/* Key details */}
      <div className="space-y-3 text-sm">
        {character.alignment && (
          <div className="flex justify-between">
            <span className="text-gray-400">Alignment:</span>
            <span>{character.alignment}</span>
          </div>
        )}
        
        {character.abilityScores && (
          <div>
            <div className="text-gray-400 mb-1">Ability Scores:</div>
            <div className="grid grid-cols-3 gap-2">
              {Object.entries(character.abilityScores).map(([ability, score]) => (
                <div key={ability} className="text-center p-1 bg-gray-700 rounded">
                  <div className="uppercase text-xs text-gray-400">{ability.substring(0, 3)}</div>
                  <div className="font-bold">{score}</div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {character.armorClass && (
          <div className="flex justify-between">
            <span className="text-gray-400">Armor Class:</span>
            <span>{character.armorClass}</span>
          </div>
        )}
        
        {character.hitPoints && (
          <div className="flex justify-between">
            <span className="text-gray-400">Hit Points:</span>
            <span>{character.hitPoints}</span>
          </div>
        )}
        
        {/* Quick feature list */}
        {character.features?.length > 0 && (
          <div>
            <div className="text-gray-400 mb-1">Features & Traits:</div>
            <ul className="list-disc list-inside text-gray-300">
              {character.features.slice(0, 3).map((feature, index) => (
                <li key={index} className="truncate">{feature.name}</li>
              ))}
              {character.features.length > 3 && (
                <li className="text-gray-400">+{character.features.length - 3} more</li>
              )}
            </ul>
          </div>
        )}
      </div>
      
      <div className="mt-4 pt-4 border-t border-gray-700 text-sm text-gray-400">
        <p>This is a preview. Toggle the preview button to see the full character sheet.</p>
      </div>
    </div>
  );
};

// client/src/lib/stores/useCharacter.ts
import { create } from 'zustand';
import { Character, AbilityScores } from '../../../shared/types';
import { calculateModifier, calculateProficiencyBonus } from '../sw5e/rules';

interface CharacterStore {
  character: Character;
  updateCharacter: (updates: Partial<Character>) => void;
  resetCharacter: () => void;
  calculateDerivedStats: () => void;
  validateCharacter: (step: number) => Record<string, string>;
}

export const useCharacter = create<CharacterStore>((set, get) => ({
  character: {
  id: '',
  name: '',
  level: 1,
  alignment: '',
  avatarUrl: '',
  concept: '',
  speciesId: '',
  speciesName: '',
  classId: '',
  className: '',
  backgroundId: '',
  backgroundName: '',
  abilityScores: {
    strength: 10,
    dexterity: 10,
    constitution: 10,
    intelligence: 10,
    wisdom: 10,
    charisma: 10
  },
  abilityScoreAdjustments: {},
  size: 'Medium',
  speed: 30,
  vision: 'Normal',
  languages: [],
  proficiencies: {
    armor: [],
    weapons: [],
    tools: [],
    savingThrows: [],
    skills: []
  },
  features: [],
  forcePowers: [],
  techPowers: [],
  equipment: [],
  armorClass: 10,
  hitPoints: 0,
  proficiencyBonus: 2,
  initiative: 0
  },
  
  updateCharacter: (updates: Partial<Character>) => {
    set((state) => ({
      character: {
        ...state.character,
        ...updates
      }
    }));
  },
  
  resetCharacter: () => {
    set({
      character: {
        id: '',
        name: '',
        level: 1,
        alignment: '',
        avatarUrl: '',
        concept: '',
        speciesId: '',
        speciesName: '',
        classId: '',
        className: '',
        backgroundId: '',
        backgroundName: '',
        abilityScores: {
          strength: 10,
          dexterity: 10,
          constitution: 10,
          intelligence: 10,
          wisdom: 10,
          charisma: 10
        },
        abilityScoreAdjustments: {},
        size: 'Medium',
        speed: 30,
        vision: 'Normal',
        languages: [],
        proficiencies: {
          armor: [],
          weapons: [],
          tools: [],
          savingThrows: [],
          skills: []
        },
        features: [],
        forcePowers: [],
        techPowers: [],
        equipment: [],
        armorClass: 10,
        hitPoints: 0,
        proficiencyBonus: 2,
        initiative: 0
      }
    });
  },
  
  calculateDerivedStats: () => {
    const { character } = get();
    const { abilityScores, level, classId } = character;
    
    if (!abilityScores) return;
    
    // Apply ability score adjustments from species
    const effectiveAbilityScores: AbilityScores = { ...abilityScores };
    if (character.abilityScoreAdjustments) {
      Object.entries(character.abilityScoreAdjustments).forEach(([ability, adjustment]) => {
        if (ability in effectiveAbilityScores) {
          effectiveAbilityScores[ability as keyof AbilityScores] += adjustment;
        }
      });
    }
    
    // Calculate proficiency bonus
    const proficiencyBonus = calculateProficiencyBonus(level);
    
    // Calculate initiative (DEX modifier)
    const initiative = calculateModifier(effectiveAbilityScores.dexterity);
    
    // Calculate armor class (base 10 + DEX modifier, before armor)
    const armorClass = 10 + calculateModifier(effectiveAbilityScores.dexterity);
    
    // Calculate hit points
    let hitPoints = 0;
    if (classId) {
      // This would be based on class hit die and CON modifier
      const conModifier = calculateModifier(effectiveAbilityScores.constitution);
      const classHitDie = {
        berserker: 12,
        consular: 6,
        engineer: 8,
        fighter: 10,
        guardian: 10,
        scholar: 6,
        scout: 8,
        sentinel: 8
      }[classId as string] || 8;
      
      // First level gets max hit die + CON mod
      hitPoints = classHitDie + conModifier;
      
      // Additional levels
      if (level > 1) {
        // For simplictiy, we're using average hit die value (half + 1)
        hitPoints += ((classHitDie / 2) + 1) * (level - 1) + (conModifier * (level - 1));
      }
    }
    
    set((state) => ({
      character: {
        ...state.character,
        proficiencyBonus,
        initiative,
        armorClass,
        hitPoints,
        // Store effective ability scores
        effectiveAbilityScores
      }
    }));
  },
  
  validateCharacter: (step: number) => {
    const { character } = get();
    const errors: Record<string, string> = {};
    
    switch (step) {
      case 0: // Basic Info
        if (!character.name?.trim()) {
          errors.name = 'Name is required';
        }
        if (!character.alignment) {
          errors.alignment = 'Alignment is required';
        }
        if (!character.level || character.level < 1 || character.level > 20) {
          errors.level = 'Level must be between 1 and 20';
        }
        break;
        
      case 1: // Species
        if (!character.speciesId) {
          errors.speciesId = 'Species selection is required';
        }
        break;
        
      case 2: // Class
        if (!character.classId) {
          errors.classId = 'Class selection is required';
        }
        break;
        
      case 3: // Ability Scores
        if (!character.abilityScores) {
          errors.abilityScores = 'Ability scores are required';
        } else {
          // Check if ability scores are within valid range
          const scores = Object.values(character.abilityScores);
          const total = scores.reduce((sum, score) => sum + score, 0);
          
          if (total > 80) { // Assuming point-buy with species adjustments
            errors.abilityScores = 'Total ability score points exceed the maximum allowed';
          }
          
          // Check individual scores
          Object.entries(character.abilityScores).forEach(([ability, score]) => {
            if (score < 3 || score > 18) {
              errors[`ability_${ability}`] = `${ability} must be between 3 and 18`;
            }
          });
        }
        break;
        
      case 4: // Background
        if (!character.backgroundId) {
          errors.backgroundId = 'Background selection is required';
        }
        break;
        
      // Validation for Force Powers depends on class
      case 5: // Force Powers
        if (
          ['consular', 'guardian', 'sentinel'].includes(character.classId || '') && 
          (!character.forcePowers || character.forcePowers.length === 0)
        ) {
          errors.forcePowers = 'Force power selection is required for your class';
        }
        break;
        
      // Validation for Tech Powers depends on class  
      case 6: // Tech Powers
        if (
          ['engineer', 'scout', 'scholar'].includes(character.classId || '') && 
          (!character.techPowers || character.techPowers.length === 0)
        ) {
          errors.techPowers = 'Tech power selection is required for your class';
        }
        break;
        
      case 7: // Equipment
        if (!character.equipment || character.equipment.length === 0) {
          errors.equipment = 'At least one piece of equipment is required';
        }
        break;
    }
    
    return errors;
  }
}));