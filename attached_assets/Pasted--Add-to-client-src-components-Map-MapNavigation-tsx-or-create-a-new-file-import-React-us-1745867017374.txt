// Add to client/src/components/Map/MapNavigation.tsx
// or create a new file

import React, { useEffect, useState } from 'react';
import { useSpring, animated } from '@react-spring/three';
import { useThree, useFrame } from '@react-three/fiber';
import * as THREE from 'three';

interface Coordinates {
  galactic?: string;
  system?: string;
  planet?: string;
  region?: string;
  local?: string;
  grid?: string;
}

interface MapNavigationProps {
  currentLevel: 'galactic' | 'system' | 'local';
  targetCoordinates?: Coordinates;
  onLevelChange: (level: 'galactic' | 'system' | 'local') => void;
  onTransitionComplete?: () => void;
}

export const MapNavigation: React.FC<MapNavigationProps> = ({
  currentLevel,
  targetCoordinates,
  onLevelChange,
  onTransitionComplete
}) => {
  const { camera, controls } = useThree();
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [transitionTarget, setTransitionTarget] = useState<{
    position: THREE.Vector3;
    lookAt: THREE.Vector3;
    zoom: number;
  } | null>(null);
  
  // Store previous level to detect changes
  const [prevLevel, setPrevLevel] = useState(currentLevel);
  
  // Navigation states for different map levels
  const navigationSettings = {
    galactic: {
      position: new THREE.Vector3(0, 50, 100),
      lookAt: new THREE.Vector3(0, 0, 0),
      zoom: 1
    },
    system: {
      position: new THREE.Vector3(0, 20, 50),
      lookAt: new THREE.Vector3(0, 0, 0),
      zoom: 1.5
    },
    local: {
      position: new THREE.Vector3(0, 10, 20),
      lookAt: new THREE.Vector3(0, 0, 0),
      zoom: 2
    }
  };
  
  // Handle level changes
  useEffect(() => {
    if (currentLevel !== prevLevel) {
      // Begin transition
      setIsTransitioning(true);
      
      // Calculate transition target
      const settings = navigationSettings[currentLevel];
      let targetPosition = settings.position.clone();
      let targetLookAt = settings.lookAt.clone();
      
      // Adjust target based on coordinates if available
      if (targetCoordinates) {
        // This would need logic to convert coordinates to 3D space
        // Example for system level:
        if (currentLevel === 'system' && targetCoordinates.system) {
          // Use system data to position camera
          // This is a placeholder - you would look up real coordinates
          const systemOffset = new THREE.Vector3(
            Math.random() * 20 - 10,
            0,
            Math.random() * 20 - 10
          );
          targetPosition.add(systemOffset);
          targetLookAt.add(systemOffset);
        }
        
        // Example for local level:
        if (currentLevel === 'local' && targetCoordinates.local) {
          // Use local coordinates for positioning
          // This is a placeholder - you would look up real coordinates
          const localOffset = new THREE.Vector3(
            Math.random() * 10 - 5,
            0,
            Math.random() * 10 - 5
          );
          targetPosition.add(localOffset);
          targetLookAt.add(localOffset);
        }
      }
      
      // Set transition target
      setTransitionTarget({
        position: targetPosition,
        lookAt: targetLookAt,
        zoom: settings.zoom
      });
      
      // Update previous level
      setPrevLevel(currentLevel);
    }
  }, [currentLevel, prevLevel, targetCoordinates]);
  
  // Spring animation for camera transitions
  const { cameraPos, cameraLookAt, cameraZoom } = useSpring({
    from: {
      cameraPos: [camera.position.x, camera.position.y, camera.position.z],
      cameraLookAt: [0, 0, 0],
      cameraZoom: camera.zoom
    },
    to: transitionTarget ? {
      cameraPos: [
        transitionTarget.position.x,
        transitionTarget.position.y,
        transitionTarget.position.z
      ],
      cameraLookAt: [
        transitionTarget.lookAt.x,
        transitionTarget.lookAt.y,
        transitionTarget.lookAt.z
      ],
      cameraZoom: transitionTarget.zoom
    } : undefined,
    config: {
      tension: 120,
      friction: 14
    },
    onRest: () => {
      setIsTransitioning(false);
      if (onTransitionComplete) {
        onTransitionComplete();
      }
    }
  });
  
  // Apply animation to camera
  useFrame(() => {
    if (isTransitioning && cameraPos.animation.values.length > 0) {
      // Update camera position
      camera.position.set(
        cameraPos.animation.values[0].value,
        cameraPos.animation.values[1].value,
        cameraPos.animation.values[2].value
      );
      
      // Update camera look-at target
      camera.lookAt(
        cameraLookAt.animation.values[0].value,
        cameraLookAt.animation.values[1].value,
        cameraLookAt.animation.values[2].value
      );
      
      // Update zoom if using OrthographicCamera
      if ('zoom' in camera) {
        camera.zoom = cameraZoom.animation.values[0].value;
        camera.updateProjectionMatrix();
      }
      
      // Update orbit controls if available
      if (controls && 'target' in controls) {
        controls.target.set(
          cameraLookAt.animation.values[0].value,
          cameraLookAt.animation.values[1].value,
          cameraLookAt.animation.values[2].value
        );
        controls.update();
      }
    }
  });
  
  // Breadcrumb-style coordinate navigation UI
  return (
    <div className="absolute top-4 left-4 bg-black/50 backdrop-blur-sm p-2 rounded text-white z-10">
      <div className="flex items-center space-x-2">
        {/* Galactic level */}
        <button 
          className={`px-2 py-1 rounded ${currentLevel === 'galactic' ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'}`}
          onClick={() => onLevelChange('galactic')}
          disabled={isTransitioning}
        >
          Galaxy
        </button>
        
        {/* Show system if available */}
        {targetCoordinates?.system && (
          <>
            <span>/</span>
            <button 
              className={`px-2 py-1 rounded ${currentLevel === 'system' ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'}`}
              onClick={() => onLevelChange('system')}
              disabled={isTransitioning}
            >
              {targetCoordinates.system}
            </button>
          </>
        )}
        
        {/* Show planet if available */}
        {targetCoordinates?.planet && (
          <>
            <span>/</span>
            <button 
              className={`px-2 py-1 rounded ${currentLevel === 'local' ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'}`}
              onClick={() => onLevelChange('local')}
              disabled={isTransitioning}
            >
              {targetCoordinates.planet}
            </button>
          </>
        )}
        
        {/* Additional location info */}
        {currentLevel === 'local' && targetCoordinates?.region && (
          <span className="ml-2 text-gray-300">
            ({targetCoordinates.region}
            {targetCoordinates.grid && ` â€¢ Grid ${targetCoordinates.grid}`})
          </span>
        )}
      </div>
    </div>
  );
};