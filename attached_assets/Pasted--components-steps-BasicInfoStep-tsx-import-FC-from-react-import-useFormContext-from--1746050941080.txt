// components/steps/BasicInfoStep.tsx
import { FC } from 'react';
import { useFormContext } from 'react-hook-form';
import { Character } from '../../shared/schema/character';

const BasicInfoStep: FC = () => {
  const { register, formState: { errors } } = useFormContext<Character>();
  
  return (
    <div className="basic-info-step">
      <h2 className="text-xl font-bold mb-4">Basic Character Information</h2>
      
      <div className="mb-6">
        <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
          Character Name*
        </label>
        <input
          id="name"
          className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 
            ${errors.name ? 'border-red-500' : 'border-gray-300'}`}
          {...register('name')}
        />
        {errors.name && (
          <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
        )}
      </div>
      
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div>
          <label htmlFor="level" className="block text-sm font-medium text-gray-700 mb-1">
            Level
          </label>
          <input
            id="level"
            type="number"
            min="1"
            max="20"
            className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 
              ${errors.level ? 'border-red-500' : 'border-gray-300'}`}
            {...register('level', { valueAsNumber: true })}
          />
          {errors.level && (
            <p className="mt-1 text-sm text-red-600">{errors.level.message}</p>
          )}
        </div>
        
        <div>
          <label htmlFor="experience" className="block text-sm font-medium text-gray-700 mb-1">
            Experience Points
          </label>
          <input
            id="experience"
            type="number"
            min="0"
            className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 
              ${errors.experience ? 'border-red-500' : 'border-gray-300'}`}
            {...register('experience', { valueAsNumber: true })}
          />
          {errors.experience && (
            <p className="mt-1 text-sm text-red-600">{errors.experience.message}</p>
          )}
        </div>
      </div>
      
      <div className="mb-6">
        <label htmlFor="alignment" className="block text-sm font-medium text-gray-700 mb-1">
          Alignment
        </label>
        <select
          id="alignment"
          className={`w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 
            ${errors.alignment ? 'border-red-500' : 'border-gray-300'}`}
          {...register('alignment')}
        >
          <option value="">-- Select Alignment --</option>
          <option value="Light Side">Light Side</option>
          <option value="Balanced">Balanced</option>
          <option value="Dark Side">Dark Side</option>
          <option value="Unaligned">Unaligned</option>
        </select>
        {errors.alignment && (
          <p className="mt-1 text-sm text-red-600">{errors.alignment.message}</p>
        )}
      </div>
      
      <div className="bg-blue-50 p-4 rounded-md border border-blue-100">
        <h3 className="text-sm font-medium text-blue-800 mb-2">Next Steps</h3>
        <p className="text-sm text-blue-700">
          After completing the basic information, you'll choose your character's species, 
          class, and abilities. Make sure to save your progress periodically.
        </p>
      </div>
    </div>
  );
};

export default BasicInfoStep;