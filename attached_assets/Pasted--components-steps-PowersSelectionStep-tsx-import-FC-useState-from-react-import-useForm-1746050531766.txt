// components/steps/PowersSelectionStep.tsx
import { FC, useState } from 'react';
import { useFormContext } from 'react-hook-form';
import { Tab } from '@headlessui/react';
import { useCharacterStore } from '../../store/useCharacterStore';
import { Character } from '../../shared/schema/character';

// Mock data - would come from API in real implementation
const forcePowers = [
  { id: 'fp1', name: 'Force Push', level: 1, description: 'Push target away with the Force', castingTime: '1 action', range: '30 feet', duration: 'Instantaneous', concentration: false },
  { id: 'fp2', name: 'Mind Trick', level: 1, description: 'Influence the mind of a target', castingTime: '1 action', range: '30 feet', duration: '1 minute', concentration: true },
  { id: 'fp3', name: 'Force Leap', level: 1, description: 'Enhance jumping ability with the Force', castingTime: '1 bonus action', range: 'Self', duration: '1 minute', concentration: false },
];

const techPowers = [
  { id: 'tp1', name: 'Shock', level: 1, description: 'Deliver an electric shock to a target', castingTime: '1 action', range: 'Touch', duration: 'Instantaneous', concentration: false },
  { id: 'tp2', name: 'Scanner', level: 1, description: 'Scan an area for information', castingTime: '1 action', range: '60 feet', duration: '10 minutes', concentration: true },
  { id: 'tp3', name: 'Shield Generator', level: 1, description: 'Create a temporary energy shield', castingTime: '1 action', range: 'Self', duration: '10 minutes', concentration: true },
];

interface PowerCardProps {
  power: any;
  isSelected: boolean;
  onToggle: () => void;
}

const PowerCard: FC<PowerCardProps> = ({ power, isSelected, onToggle }) => {
  return (
    <div 
      className={`p-4 border rounded-md cursor-pointer mb-2 ${isSelected ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}`}
      onClick={onToggle}
    >
      <div className="flex justify-between">
        <div className="font-bold">{power.name}</div>
        <div className="text-sm">Level {power.level}</div>
      </div>
      <div className="text-sm mt-1">{power.description}</div>
      <div className="text-xs text-gray-600 mt-2">
        <span className="mr-2">Casting time: {power.castingTime}</span>
        <span className="mr-2">Range: {power.range}</span>
        <span>Duration: {power.duration}</span>
        {power.concentration && <span className="ml-2 text-amber-600">(Concentration)</span>}
      </div>
    </div>
  );
};

const PowersSelectionStep: FC = () => {
  const { character, updateNestedCharacter } = useCharacterStore();
  const { setValue } = useFormContext<Character>();
  const [tabIndex, setTabIndex] = useState(0);
  
  // Determine available power slots based on class
  const calculateAvailablePowerSlots = () => {
    // This would be more complex in a real implementation based on class/level
    return {
      force: character.class.name.toLowerCase().includes('force') ? 2 : 0,
      tech: character.class.name.toLowerCase().includes('engineer') ? 2 : 1,
    };
  };
  
  const availableSlots = calculateAvailablePowerSlots();
  
  const toggleForcePower = (power: any) => {
    const currentPowers = [...character.powers.force];
    const powerIndex = currentPowers.findIndex(p => p.id === power.id);
    
    if (powerIndex >= 0) {
      // Remove power
      currentPowers.splice(powerIndex, 1);
    } else {
      // Add power if slots available
      if (currentPowers.length < availableSlots.force) {
        currentPowers.push(power);
      }
    }
    
    updateNestedCharacter(['powers', 'force'], currentPowers);
    setValue('powers.force', currentPowers);
  };
  
  const toggleTechPower = (power: any) => {
    const currentPowers = [...character.powers.tech];
    const powerIndex = currentPowers.findIndex(p => p.id === power.id);
    
    if (powerIndex >= 0) {
      // Remove power
      currentPowers.splice(powerIndex, 1);
    } else {
      // Add power if slots available
      if (currentPowers.length < availableSlots.tech) {
        currentPowers.push(power);
      }
    }
    
    updateNestedCharacter(['powers', 'tech'], currentPowers);
    setValue('powers.tech', currentPowers);
  };
  
  return (
    <div className="powers-selection">
      <h2 className="text-xl font-bold mb-4">Select Powers</h2>
      
      <Tab.Group selectedIndex={tabIndex} onChange={setTabIndex}>
        <Tab.List className="flex space-x-1 rounded-xl bg-blue-900/20 p-1 mb-4">
          <Tab 
            className={({ selected }) =>
              `w-full rounded-lg py-2.5 text-sm font-medium leading-5 
              ${selected ? 'bg-white shadow text-blue-700' : 'text-blue-100 hover:bg-white/[0.12] hover:text-white'}`
            }
          >
            Force Powers ({character.powers.force.length}/{availableSlots.force})
          </Tab>
          <Tab
            className={({ selected }) =>
              `w-full rounded-lg py-2.5 text-sm font-medium leading-5 
              ${selected ? 'bg-white shadow text-blue-700' : 'text-blue-100 hover:bg-white/[0.12] hover:text-white'}`
            }
          >
            Tech Powers ({character.powers.tech.length}/{availableSlots.tech})
          </Tab>
        </Tab.List>
        
        <Tab.Panels>
          <Tab.Panel>
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-4">
                Select up to {availableSlots.force} force powers for your character.
              </p>
              
              {availableSlots.force === 0 ? (
                <div className="text-amber-600">
                  Your class does not grant access to Force powers.
                </div>
              ) : (
                <div className="space-y-2">
                  {forcePowers.map(power => (
                    <PowerCard
                      key={power.id}
                      power={power}
                      isSelected={character.powers.force.some(p => p.id === power.id)}
                      onToggle={() => toggleForcePower(power)}
                    />
                  ))}
                </div>
              )}
            </div>
          </Tab.Panel>
          
          <Tab.Panel>
            <div className="mb-4">
              <p className="text-sm text-gray-600 mb-4">
                Select up to {availableSlots.tech} tech powers for your character.
              </p>
              
              {availableSlots.tech === 0 ? (
                <div className="text-amber-600">
                  Your class does not grant access to Tech powers.
                </div>
              ) : (
                <div className="space-y-2">
                  {techPowers.map(power => (
                    <PowerCard
                      key={power.id}
                      power={power}
                      isSelected={character.powers.tech.some(p => p.id === power.id)}
                      onToggle={() => toggleTechPower(power)}
                    />
                  ))}
                </div>
              )}
            </div>
          </Tab.Panel>
        </Tab.Panels>
      </Tab.Group>
    </div>
  );
};

export default PowersSelectionStep;